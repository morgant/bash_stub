#!/bin/bash

# 
# bash_stub - This is the stub I use for creating new command line tools using 
#             `bash`. It's always evolving.
# 
# CHANGE LOG:
# 
# v0.1   2012-01-08 - Morgan Aldridge <morgant@makkintosshu.com>
#                     Initial version, based on some of my tools like trash and
#                     eject.
# v0.1.1 2012-01-08 - Morgan Aldridge
#                     Added version info and support for GNU-style options.
# 
# LICENSE:
# 
# Copyright (c) 2012, Morgan Aldridge. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
# 
# - Redistributions of source code must retain the above copyright notice, this 
#   list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright notice, 
#   this list of conditions and the following disclaimer in the documentation 
#   and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 

# info
tool=$(basename "$0")
version='0.1.1'
copyright=''

# global variables
verbose=false

# print usage instructions (help)
function usage() {
	echo "Usage: $tool [options]"
	echo '  -h, --help      print these usage instructions'
	echo '  -v, --verbose   verbose output'
	echo '  -V, --version   print the version'
}

# print version info
function version() {
	echo "$tool v$version $copyright"
}

# see if any arguments were passed in
if [ $# -gt 0 ]; then
	# if so, step through them all and process them
	while [ $# -gt 0 ]; do
		# see if the user intended us to run in verbose mode
		if [ "$1" = "-v" -o "$1" = "--verbose" ]; then
			shift
			verbose=true
		# see if the user requested help
		elif [ "$1" = "-h" -o "$1" = "--help" ]; then
			shift
			usage
			exit
		# see if the user requested the version
		elif [ "$1" = "-V" -o "$1" = "--version" ]; then
			shift
			version
			exit
		# handle other options & arguments
		else
			
			shift
		fi
	done
else
	echo "No options or arguments were specified!"$'\n'
	usage
	exit 1
fi
